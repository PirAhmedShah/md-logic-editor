import { isNumber, isValidHex  } from "./utility.js";

export class AutoCompletion{
    constructor(editor) {
        //console.log("____CON AUTO COMPLETION")
        this.maxSuggestions = 8;
        this.list = [];
        this.editor = editor;
        this.logic = editor.logic;

    }
    findRelevantStrings(str, array) {
        //console.log("____FUNC AC FIND REL STR____")
        return array
          .filter((item) => {
            return (
              (item === "[number]" && isNumber(str)) ||
              (item === "[variable]" && this.logic.variable[str]) ||
              (item === "[label]" && this.logic.label[str]) ||
              (item === "[color]" && this.isValidHex(str)) ||
              item.startsWith(str) ||
              str.split("").every((char) => item.includes(char))
            );
          })
          .sort((a, b) => {
            if (a === "[number]" || a === "[variable]" || a === "[label]") return 1;
            const startsWithStrA = a.startsWith(str);
            const startsWithStrB = b.startsWith(str);
            return startsWithStrA && !startsWithStrB  ? -1 : !startsWithStrA && startsWithStrB ? 1 : a.length - b.length;  
          });
      }
     
      updateAutoCompletionArray(arr, index) {
        //console.log("____FUNC AC UPDATE AUTO COMPLETION ARR____")
        this.list = null;
        let attr = Array.from(this.getParameterArray(arr, index));
        let arrayToCheck = [];
        if (attr[0] === "[string]") {
          this.list = attr;
          return;
        }
        arrayToCheck.push(
          ...attr.filter((str) => {
            if (str == "existing_vars") arrayToCheck.push(...Object.keys(this.variable));
            else if (str == "existing_user_var") arrayToCheck.push(...Object.keys(this.variable).filter((str2) => !suggestions.readOnlyVarNames.has(str2)));
            else if (str == "linked_buildings") arrayToCheck.push(...this.linkedBuildings);
            else if (str == "existing_label") arrayToCheck.push(...Object.keys(this.label));
            else return true;
            return false;
          })
        );
        attr = null;
        let keyword = arr[index];
        this.list = this.isAutoGenerated(keyword) || keyword.trim() === "" ? arrayToCheck : this.findRelevantStrings(keyword, arrayToCheck);
        arrayToCheck = null;
      }
      autoFill(autoFillWordIndex, arr, index) {
        //console.log("____FUNC AC AUTO FILL____")
        if (index >= arr.length) throw new Error("Couldn't auto fill. Index out of Range. Index >" + index + " Expected Less than >" + arr.length);
    
        let keywordToBeFilled = this.list[autoFillWordIndex];
        if (suggestions.specialKeywords.has(keywordToBeFilled)) return false;
        if (this.getParameterArray(arr, index).has("[variable]")) this.updateVar(arr[index], keywordToBeFilled, arr, index);
        else arr[index] = keywordToBeFilled;
        return true;
      }
    
}