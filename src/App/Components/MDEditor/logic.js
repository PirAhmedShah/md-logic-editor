"use strict";
import { forbiddenVarName, parameters } from "../Objects/main.js";
import {isAutoGenerated,isCommand,isComment,getParameterArray } from "./utility.js";

export class Logic{
    constructor(editor){
        //console.log("____CON LOGIC____")
        this.editor = editor;
        this.lines = this.editor.lines;
        
        this.variable = {
            "@this": 1,
            "@thisx": 1,
            "@thisy": 1,
            "@ipt": 1,
            "@time": 1,
            "@tick": 1,
            "@counter": 1,
            "@link": 1,
            "@unit": 1,
            "@mapw": 1,
            "@maph": 1,
            "@waveNumber": 1, //ADD ALL BELOW TO DATABASE
            "@waveTime": 1,
            "@second": 1,
            "@minute": 1,
            "@waveTime": 1,
          };
          this.label = {};
          this.labelPointingTo = {};
          
          this.buildings = {};
          this.linkedBuildings = new Set();

          this.lineNumbers = [];
          this.validLogicLinePos = {};

          
    }
     isValidVariable(array, index, exception = false) {
        //console.log("____FUNC LG IS VALID VAR____")
        return /^[a-zA-Z_@][a-zA-Z0-9_]*$/.test(array[index]) && !forbiddenVarName.has(array[index]) && (exception || getParameterArray(array, index).has("[variable]"));
      }
       isValidLabel(array, index) {
        //console.log("____FUNC LG IS VALID LABEL____")
        return /^[a-zA-Z_@][a-zA-Z0-9_]*$/.test(array[index]) && !forbiddenVarName.has(array[index]) && !this.variable[array[index]] && getParameterArray(array, index).has("[label]");
      }
       isValidLogicLine(line) {
        //console.log("____FUNC LG IS VALID LOGIC LINE____")
        if (line.length == 0) return false;
        let firstKeyword = line[0];
        return !(isAutoGenerated(firstKeyword) || isCommand(line) || isComment(line) || !parameters[0][firstKeyword]);
      }
      
    
    updateLabelsPointingTo() {
        //console.log("____FUNC LG UPDATELABELSPOINTINGTO____")
        for (let i = 0; i < this.lines.length; i++) {
          const line = this.lines[i];
          if (line[0] !== ".label") continue;
          this.labelPointingTo[line[1]] = this.lineNumbers[i];
        }
      }
      getLineToHighlight(line) {
        //console.log("____FUNC LG GETLINETOHIGHTLIGHT____")
        if (line[0] === "jump") {
          let to = line[1];
          if (this.isNumber(to)) return this.validLogicLinePos[to]; // Task is to find the logic line number to in textBufferarray
          else if (this.label[to]) {
            this.updateLabelsPointingTo();
            return this.validLogicLinePos[this.labelPointingTo[to]]; // same Task here;
          }
        }
        return -1;
      }
    
      resolveVariable(keyword) {
        //console.log("____FUNC LG RES VAR____")
        return this.variable[keyword] && !forbiddenVarName.has(keyword);
      }
    
      resolveLabelCondition(labelName) {
        //console.log("____FUNC LG RES LABEL CONDITION____")
        return /^[a-zA-Z_@][a-zA-Z0-9_]*$/.test(labelName) && this.label[labelName] == 1;
      }
    updateVar(prevVar, newVar, arr, index) {
        //console.log("____FUNC LG UPDATE VAR____")
        if (this.variable[prevVar]) this.addVar(prevVar);
        arr[index] = newVar;
        if (this.isValidVariable(arr, index, true)) this.addVar(newVar);
      }
      updateLabel(prevLabel, newLabel, line, uline) {
        //console.log("____FUNC LG UPDATE LABEL____")
        if (uline[0] === ".label" && this.label[prevLabel]) this.removeLabel(prevLabel);
        if (this.isValidLabel(line, 1)) this.addLabel(newLabel);
      }
    
      addVar(varName) {
        //console.log("____FUNC LG ADD VAR____")
        if (this["variable"][varName]) this["variable"][varName]++;
        else this["variable"][varName] = 1;
      }
      removeVar(varName) {
        //console.log("____FUNC LG REMOVE VAR____")
        if (!this["variable"][varName]) throw new Error("Couldn't remove item > " + varName + " < from variable");
        if (this["variable"][varName] > 1) this["variable"][varName]--;
        else delete this["variable"][varName];
      }
      addLabel(labelName) {
        //console.log("____FUNC LG ADDLABEL____")
        if (this["label"][labelName]) this["label"][labelName]++;
        else this["label"][labelName] = 1;
      }
      removeLabel(labelName) {
        //console.log("____FUNC LG REMOVE LABEL____")
        if (!this["label"][labelName]) throw new Error("Couldn't remove item > " + labelName + " < from label");
        if (this["label"][labelName] > 1) this["label"][labelName]--;
        else delete this["label"][labelName];
      }
      updateLineNumbers() {
        //console.log("____FUNC LG UPDATE LINE NUMBER____")
        let lineNumber = 0;
        for (let i = 0; i < this.lines.length; i++) {
          this.lineNumbers[i] = lineNumber;
          if (this.isValidLogicLine(this.lines[i])) {
            this.validLogicLinePos[this.lineNumbers[i]] = i;
            lineNumber++;
          }
        }
      }
     
}